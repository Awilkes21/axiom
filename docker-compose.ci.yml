services:
  backend:
    build: ./backend
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    env_file: []
    environment:
      DB_URL: ${BACKEND_DB_URL}
      JWT_SECRET: ${BACKEND_JWT_SECRET}
      PORT: "4000"

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - websocket
    env_file: []
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:4000"
      NEXT_PUBLIC_WS_URL: "ws://localhost:5000"

  websocket:
    build: ./websocket
    ports:
      - "5000:5000"
      - "5001:5001"
    env_file: []
    environment:
      WS_PORT: ${WS_PORT}
      WS_HEALTH_PORT: ${WS_HEALTH_PORT}

  db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file: []
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
